type UniFormSubmitEventDetail = {
  value : UTSJSONObject
}

type UniFormResetEventDetail = {
}

export class UniFormSubmitEvent extends UniCustomEvent<UniFormSubmitEventDetail> {
  constructor(value : UTSJSONObject) {
    super('submit', { value } as UniFormSubmitEventDetail)
  }
}

export class UniFormResetEvent extends UniCustomEvent<UniFormResetEventDetail> {
  constructor() {
    super('reset', {} as UniFormResetEventDetail)
  }
}

export class UniFormElement extends UniViewElementImpl implements UniCustomElement, IUniForm {
  static get observedAttributes() : Array<string> {
    return ['disabled']
  }

  constructor() {
    super()
  }

  // TODO 鸿蒙Bug 当所有属性可选时必须实现一个
  attributeChangedCallback(name : string, oldValue : any | null, newValue : any | null) {
  }

  get disabled() : boolean {
    return this.getAttribute('disabled') == 'true' ? true : false
  }

  submit() {
    if (this.disabled) {
      return
    }

    const formData = {}
    this.findFormControls(this).forEach((control : UniFormControl<unknown>) => {
      formData[control.name] = control.value
    })

    this.dispatchEvent(new UniFormSubmitEvent(formData))
  }

  reset() {
    if (this.disabled) {
      return
    }

    this.findFormControls(this).forEach((control : UniFormControl<unknown>) => {
      control.reset()
    })

    this.dispatchEvent(new UniFormResetEvent())
  }

  private findFormControls(el : UniElement) : UniFormControl<unknown>[] {
    const controls : UniFormControl<unknown>[] = []
    el.children.forEach((item : UniElement) => {
      if (item instanceof UniFormControlElement<unknown>) {
        const control = item as UniFormControl<unknown>
        if (control.name.length > 0) {
          controls.push(control)
        }
      } else {
        this.findFormControls(item).forEach((item : UniFormControl<unknown>) => {
          controls.push(item)
        })
      }
    })
    return controls
  }
}
